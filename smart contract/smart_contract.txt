// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.4.16 <0.9.0;

contract cert{
struct college{
string colname;
bool value;
}
struct cert_details{
string fname;
string lname;
string course;
string colname;
}
uint256 id = 0;
mapping(address => cert_details) certificates_by_address;
mapping(uint => cert_details) certificates_by_id;
mapping(address => college) colleges;

address owner;
constructor() public
{
owner=msg.sender;
}
modifier ownerOnly
{
require(owner==msg.sender);
_;
}
event coll_added (string name);
event certadded (string fname, string lname, string course, string cname);
event id_requested (uint256 id);

function addCollege(address coladd,string memory name) ownerOnly public
{
colleges[coladd] = college(name, true);
emit coll_added("Am adaugat colegiu."); //calling event
}
function checkcoll(address col) view public returns (bool)
{
return colleges[col].value;
}
function viewcert(address sender) view public returns(string memory ffname)
{
return certificates_by_address[sender].fname;
}

function getid() public returns (uint256)
{
emit id_requested(id);
return id;
}
function getcert (uint256 idd) public returns (string memory, string memory, string memory, string memory)
{
require(idd < id, "ID-ul nu exista");
return (certificates_by_id[idd].fname,
certificates_by_id[idd].lname,
certificates_by_id[idd].course,
certificates_by_id[idd].colname);
}
function addcert(string memory lname,string memory fname,string memory course) public
{
if(checkcoll(msg.sender))
{
certificates_by_address[msg.sender] = cert_details(fname, lname, course,
colleges[msg.sender].colname);
certificates_by_id[id] = cert_details(fname, lname, course,
colleges[msg.sender].colname);
id = id + 1;
}
}
}